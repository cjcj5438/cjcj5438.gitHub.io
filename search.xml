<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[额外的数组]]></title>
      <url>/2018/01/18/%E9%A2%9D%E5%A4%96%E7%9A%84%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<p>这些方法都很重要</p>
<h2 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf"></a>Array.prototype.indexOf</h2><h2 id="Array-prototype-lastIndexOf"><a href="#Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.lastIndexOf"></a>Array.prototype.lastIndexOf</h2><h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every"></a>Array.prototype.every</h2><h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some"></a>Array.prototype.some</h2><h2 id="Array-prototype-forEach"><a href="#Array-prototype-forEach" class="headerlink" title="Array.prototype.forEach"></a>Array.prototype.forEach</h2><h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map"></a>Array.prototype.map</h2><h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter"></a>Array.prototype.filter</h2><h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce"></a>Array.prototype.reduce</h2><h2 id="Array-prototype-reduceRight"><a href="#Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduceRight"></a>Array.prototype.reduceRight</h2>]]></content>
      
        
        <tags>
            
            <tag> ES5+ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[This 指针的使用]]></title>
      <url>/2018/01/18/This-%E6%8C%87%E9%92%88%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="谁调指谁"><a href="#谁调指谁" class="headerlink" title="谁调指谁"></a>谁调指谁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//example 01</span><br><span class="line">function test() &#123;</span><br><span class="line">    console.log(this.m)</span><br><span class="line">&#125;</span><br><span class="line">this.m=100</span><br><span class="line">window.test(); //这里的this是window</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//example 02</span><br><span class="line">this.m=1000;</span><br><span class="line">var obj=&#123;</span><br><span class="line">	m:100,</span><br><span class="line">	test:function()&#123;</span><br><span class="line">		console.log(this.m)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.test();&gt;&gt;100</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//example 03 闭包里面的this</span><br><span class="line">this.m = 1000;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    m: 100,</span><br><span class="line">    test: function () &#123;</span><br><span class="line">        // console.log(this.m);//100</span><br><span class="line">        return function () &#123;</span><br><span class="line">            console.log(this.m)</span><br><span class="line">            //这里被返回到外层函数,在window全局下. 此时的this 是1000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.test()();&gt;&gt;1000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//example 04在DOM事件上的this指向</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;test&quot; id=&quot;test&quot; style=&quot;color: red&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var style=&#123;</span><br><span class="line">        color:&quot;green&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    function test() &#123;</span><br><span class="line">        console.log(this.style.color)</span><br><span class="line">    &#125;</span><br><span class="line">    document.getElementById(&quot;test&quot;).onclick=test;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//example 05 面向对象的this</span><br><span class="line">this.a = 1000;</span><br><span class="line">function test() &#123;</span><br><span class="line">    this.a = 1;</span><br><span class="line">&#125;</span><br><span class="line">test.prototype.getA = function () &#123;</span><br><span class="line">    return this.a;</span><br><span class="line">&#125;;</span><br><span class="line">var p = new test;</span><br><span class="line">console.log(p.getA())</span><br><span class="line">// p调用了getA ;</span><br><span class="line">// p new test构造函数, 所以最后挂载带test()函数里面的a了</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> ES5+ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Object 构造器的附加对象 -- 高阶用法]]></title>
      <url>/2018/01/18/Object-%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E9%99%84%E5%8A%A0%E5%AF%B9%E8%B1%A1-%E9%AB%98%E9%98%B6%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object 构造器</a><br>TODO : ES6,7,8 还在提案中 ,后续更新</p>
<h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h2><h2 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h2><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h2><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><p>方法创建一个拥有指定原型和诺干属性的对象</p>
<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p><strong>控制对象属性</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var cat = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(cat, &quot;name&quot;, &#123;</span><br><span class="line">  value: &quot;Maru&quot;,</span><br><span class="line">  writable: false, //写</span><br><span class="line">  enumerable: true, //枚举</span><br><span class="line">  configurable: false //可否配置</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Object.defineProperty(cat, &quot;skill&quot;, &#123;</span><br><span class="line">  value: &quot;exploring boxes&quot;,</span><br><span class="line">  writable: true,</span><br><span class="line">  enumerable: true,</span><br><span class="line">  configurable: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h2><h2 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal"></a>Object.seal</h2><h2 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h2><h2 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions"></a>Object.preventExtensions</h2><h2 id="Object-isSealed"><a href="#Object-isSealed" class="headerlink" title="Object.isSealed"></a>Object.isSealed</h2><h2 id="Object-isFrozen"><a href="#Object-isFrozen" class="headerlink" title="Object.isFrozen"></a>Object.isFrozen</h2><h2 id="Object-isExtensible"><a href="#Object-isExtensible" class="headerlink" title="Object.isExtensible"></a>Object.isExtensible</h2><h2 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h2><p>这个很常用,操作对象等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var nums=&#123;</span><br><span class="line">    &quot;first&quot;:7,</span><br><span class="line">    &quot;second&quot;:14,</span><br><span class="line">    &quot;third&quot;:13</span><br><span class="line">&#125;;</span><br><span class="line">//这样就很容易的拿到值了</span><br><span class="line">var test = Object.keys(nums);</span><br><span class="line">for (var i=0;i&lt;test.length;i++)&#123;</span><br><span class="line">    console.log(nums[test[i]])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> ES5+ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSON进阶]]></title>
      <url>/2018/01/18/JSON%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<h2 id="JSON-parse-text-reviver"><a href="#JSON-parse-text-reviver" class="headerlink" title="JSON.parse(text,[,reviver])"></a>JSON.parse(text,[,reviver])</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var result = JSON.parse(&apos;&#123;&quot;a&quot;: 1, &quot;b&quot;: &quot;2&quot;&#125;&apos;, function(key, value)&#123;</span><br><span class="line">  if (typeof value == &apos;string&apos;)&#123;</span><br><span class="line">    return parseInt(value);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return value; </span><br><span class="line">  &#125;</span><br><span class="line">  //result.b    2</span><br></pre></td></tr></table></figure>
<p>确保解析的时候是们需要的数据</p>
<h2 id="JSON-stringify-value-replacer-space"><a href="#JSON-stringify-value-replacer-space" class="headerlink" title="JSON.stringify(value [, replacer [, space]])"></a>JSON.stringify(value [, replacer [, space]])</h2><p>JSON.stringify允许作者接受一个ECMAScript值然后转换成JSON格式的字符串。 在其最简单的形式中，JSON.stringify接受一个值返回一个字符串，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var mike = JSON.stringify(&#123;mike: &quot;taylor&quot;&#125;)</span><br><span class="line"> mike&gt;&gt;&apos;&#123;&quot;mike&quot;: &quot;taylor&quot;&#125;&apos;</span><br><span class="line"> typeof mike &gt;&gt;&quot;string&quot;</span><br></pre></td></tr></table></figure></p>
<p>如果replacer方法返回undefined, 则键值对就不会包含在最终的JSON中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var nums = &#123;</span><br><span class="line">  &quot;first&quot;: 7,</span><br><span class="line">  &quot;second&quot;: 14,</span><br><span class="line">  &quot;third&quot;: 13</span><br><span class="line">&#125;</span><br><span class="line">var luckyNums = JSON.stringify(nums, function(key, value)&#123;</span><br><span class="line">  if (value == 13) &#123;</span><br><span class="line">    return undefined;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,2);//这里的2 是打印出来的缩进2个字符,在开发node 比较实用</span><br><span class="line">console.log(luckyNums)&gt;&gt;&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;first&quot;:7,</span><br><span class="line">  &quot;second&quot;:14</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> JSON </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bind&call&apply 点拨]]></title>
      <url>/2018/01/18/bind-call-apply-%E7%82%B9%E6%8B%A8/</url>
      <content type="html"><![CDATA[<p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。<br>我的理解:  允许你改变当前function 的相应this的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">//this的值被bind改变了</span><br><span class="line">function locate() &#123;</span><br><span class="line">    console.log(this.location)</span><br><span class="line">&#125;</span><br><span class="line">function Marn(location) &#123;</span><br><span class="line">    this.location=location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var kitty = new Marn(&apos;my bind&apos;);</span><br><span class="line">//这里的kitty就是this 的改变者</span><br><span class="line">var locateBind=locate.bind(kitty);  //强度理解.换成了kitty:this.prototype  </span><br><span class="line">locateBind();</span><br><span class="line"></span><br><span class="line">//还有这里我们换成call</span><br><span class="line">var kittyCall = new Marn(&quot;my call&quot;);</span><br><span class="line">locate.call(kittyCall);</span><br><span class="line">//还有这里我们换成apply</span><br><span class="line">var kittyApple = new Marn(&quot;my apply&quot;);</span><br><span class="line">locate.apply(kittyCall);</span><br></pre></td></tr></table></figure></p>
<p>// 这些有什么不同呢? call和bind 之后就要立即执行<br>// 但是我们用来 bind 不会立即执行. 有利于我们对原型链进行扩展</p>
]]></content>
      
        
        <tags>
            
            <tag> ES5+ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux基本命令]]></title>
      <url>/2018/01/17/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="Linux-基本命令"><a href="#Linux-基本命令" class="headerlink" title="Linux 基本命令"></a>Linux 基本命令</h1><ol>
<li>ls 查看文件目录</li>
<li>dir 查看文件目录</li>
<li>ls -l 查看文件详情</li>
<li>ls -a 查看隐藏文件  . 当前目录;  .. 上一级目录</li>
<li>cd 切换目录</li>
<li>mkdir xxx 创建xxx目录</li>
<li>cp &lt;目标文件&gt; [期望文件路径]/&lt;重命名文件名&gt; eg:cp oldfile C/newfile 复制文件</li>
<li>cd ../.. 退回2级目录</li>
<li>cp -R oldfile newfile 复制目录: 在当前目录下复制oldfile目录 同时改名newfile</li>
<li>pwd 显示当前用户所有目录</li>
<li>rm &lt;目标文件&gt; 删除文件</li>
<li>rm -r &lt;目标文件&gt;</li>
<li>cd / 返回根目录</li>
<li>cd ~显示用户路径</li>
<li>touch index.js 创建文件</li>
<li>vi index.js 进入文件编辑</li>
<li>cat index.js 查看文件</li>
<li>init 3 进入无界面</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
